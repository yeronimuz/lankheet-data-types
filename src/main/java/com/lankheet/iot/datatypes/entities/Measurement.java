/**
 * MIT License
 * 
 * Copyright (c) 2017 Lankheet Software and System Solutions
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lankheet.iot.datatypes.entities;

import java.util.Date;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * A Measurement is a single information item that is produced by the LNB domotics system. The id
 * field value is generated by the database.
 */
@Entity(name = "measurements")
public class Measurement {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    @ManyToOne
    private Sensor sensor;

    @Temporal(value = TemporalType.TIMESTAMP)
    private Date timeStamp;

    private MeasurementType measurementType;

    private double value;

    /**
     * Default constructor required for JPA
     */
    public Measurement() {}

    /**
     * Constructor.
     * 
     * @param sensor Sensor as stored in database
     * @param timeStamp The time of occurrence
     * @param type Type of measurement as known in database
     * @param value The value of the measurement
     */
    public Measurement(Sensor sensor, Date timeStamp, MeasurementType measurementType, double value) {
        this.sensor = sensor;
        this.measurementType = measurementType;
        this.timeStamp = timeStamp;
        this.value = value;
    }
    
    public int getId() {
        return id;
    }

    public Sensor getSensor() {
        return sensor;
    }

    public MeasurementType getMeasurementType() {
        return measurementType;
    }

    public void setMeasurementType(MeasurementType measurementType) {
        this.measurementType = measurementType;
    }

    public Date getTimeStamp() {
        return timeStamp;
    }

    public double getValue() {
        return value;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return "Measurement [id=" + id + ", sensor=" + sensor + ", timeStamp=" + timeStamp + ", measurementType="
                + measurementType + ", value=" + value + "]";
    }
}
