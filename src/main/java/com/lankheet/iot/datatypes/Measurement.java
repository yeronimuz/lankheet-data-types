/**
 * MIT License
 * 
 * Copyright (c) 2017 Lankheet Software and System Solutions
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lankheet.iot.datatypes;

import java.util.Date;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A Measurement is a single information item that is produced by the LNB
 * domotics system. The id field value is generated by the database. The sensorId is
 * retrieved manually from the web service (until an automated system is
 * created).
 */
@Entity(name = "measurements")
public class Measurement {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;

	@JsonProperty
	@JoinColumn(name = "sensor.id")
	private int sensorId;

	@JsonProperty
	@Temporal(value = TemporalType.TIMESTAMP)
	private Date timeStamp;

	@JsonProperty
	private Integer type;

	@JsonProperty
	private double value;

	/**
	 * Default constructor required for JPA
	 */
	public Measurement() {
	}

	@JsonCreator
	public Measurement(@JsonProperty("sensorId") int sensorId, @JsonProperty("timeStamp") Date timeStamp,
			@JsonProperty("type") Integer type, @JsonProperty("value") double value) {
		this.sensorId = sensorId;
		this.type = type;
		this.timeStamp = timeStamp;
		this.value = value;
	}

	public int getSensorId() {
		return sensorId;
	}

	public Integer getType() {
	    return type;
	}
	
	public void setMeasurementType(Integer type) {
	    this.type = type;
	}

	public Date getTimeStamp() {
		return timeStamp;
	}

	public double getValue() {
		return value;
	}

	@Override
	public String toString() {
		return "Measurement [sensorId=" + sensorId + ", timeStamp=" + timeStamp + ", type=" + type + ", value=" + value
				+ "]";
	}
}
